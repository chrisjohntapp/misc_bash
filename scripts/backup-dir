#!/bin/bash

# Backup a directory in user's $HOME dir to a backup server.
# e.g. for Dropbox or similar.

# Optional overrides.
custom_local_user=
custom_remote_user=
port=

source_dir="$1"
backup_server="$2"
script=$(basename "$0")

# Defaults with overrides
local_user=${custom_local_user:-$(id -un)}
remote_user=${custom_remote_user:-$(id -un)}

# A different way of setting a 'default with override' variable.
# Not exactly the same -- look into it.
: ${port:=22}

usage() {
  { printf "Usage: %s <directory in \$HOME dir> to back up> <backup server>\n" "${script}"; exit 0; }
}

[[ $# = 2 ]] || usage

lib_healthcheck=$(find "${HOME}" -type f -name lib_healthcheck.sh 2>/dev/null)
if [[ -n "${lib_healthcheck}" ]]; then
  . "${lib_healthcheck}"
else
  usage
fi

# Capture resulting string rather than return code.
ping_result=$(pingable ${backup_server})
if [[ $? = 0 ]] && [[ -z "${ping_result}" ]]; then
  rsync_result=$(rsync --delete -e "ssh -p ${port}" -a /home/${local_user}/"${source_dir}" ${remote_user}@${backup_server}:/backups/funnel)
  if [[ $? = 0 ]]; then
    ssh -p ${port} ${remote_user}@${backup_server} touch /backups/funnel/"${source_dir}"
  else
    { printf "Error: %s.\n" "${rsync_result}"; exit 1; }
  fi
else
  { printf "Error: %s.\n" "${ping_result}"; exit 1; }
fi

