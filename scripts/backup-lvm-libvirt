#!/bin/bash

#
# Backup Libvirt guests using LVM snapshots.
#

#
# Settings.
#

backup_target="/green/backup"

#
# Functions.
#

function check_space_available() { # 1:lv_size
    #
    # Returns code 0 if space is available, or 1 if not.
    #
    local target_space_available

    target_space_available=$(df --sync -BG "${backup_target}" | sed '1d' \
    | awk '{print $2}' | tr -d 'G')
    logger -p user.debug "${script_name}: lv_size: ${1}G."
    logger -p user.debug "${script_name}: target_space_available: ${target_space_available}G."

    if [[ "${target_space_available}" -lt "$1" ]]; then
        logger -p user.info "${script_name}: Not enough space available on \
${backup_target}. Exiting."
        exit 1
    else
        logger -p user.info "${script_name}: Adequate space available on \
${backup_target}"
        return 0
    fi
}

function get_lv_size() { # 1:lv_path
    #
    # Return the size in GB of lv_path.
    #
    local size

    if size="$(lvs --noheadings --units g -o lv_name,seg_size "$1" | awk \
    '{print $2}' | tr -d 'g')"; then
        intsize=${size%.*}
        printf "%s" "${intsize}"
    else
        logger -p user.err "${script_name}: Failed to retrieve LV size. Exiting"
        exit 1
    fi
}

function get_vg_name() { # 1:lv_path
    #
    # Return the name of vg from lv_path.
    #
    local vg_name

    if vg_name=$(lvs --noheadings -o vg_name "$1" | tr -d ' '); then
        logger -p user.debug "${script_name}: vg_name: ${vg_name}."
        printf "%s" "${vg_name}"
    else
        logger -p user.err "${script_name}: Could not obtain VG name. Exiting."
        exit 1
    fi
}

#
# Main.
#

# Validate.
[[ -d "${backup_target}" ]] || { printf "%s does not exist or is not a \
directory" "${backup_target}"; exit 1; }

script_name=$(basename "$0")
[[ $# = 1 ]] || { printf "%s vm_name" "${script_name}"; exit 1; }

vm_name="$1"

# Populate list with absolute paths of all lvs associated with vm_name.
mapfile -t list_paths < <(virsh domblklist --details "${vm_name}" | grep -Ev file | sed '1,2d' | sed '$,1d' | awk '{print $4}')
logger -p user.info "${script_name}: LVs associated with VM: ${list_paths[*]}."

# Create hash of lv paths + sizes in GB.
declare -A lv_sizes
for lv_path in "${list_paths[@]}"; do
    size=$(get_lv_size "${lv_path}")
    logger -p user.debug "${script_name}: ${lv_path} size: ${size}G."
    lv_sizes["${lv_path}"]="${size}"
    logger -p user.info "${script_name}: Added ['${lv_path}': ${size}] to hash."
done

# Create snapshot for each LV & populate a list with results.
snapshots=()
for lv_path in "${!lv_sizes[@]}"; do
    logger -p user.info "${script_name}: Checking if space is available."
    check_space_available "${lv_sizes[${lv_path}]}" 

    logger -p user.info "${script_name}: Obtaining VG name."
    vg_name=$(get_vg_name "${lv_path}")

    int_snap_name=$(printf "%s" "${lv_path}" | sed 's/.*\///')
    snap_name="${int_snap_name}.snap"
    logger -p user.info "${script_name}: Creating snapshot of ${lv_path} named ${snap_name}."
    lvcreate -L"${lv_sizes[${lv_path}]}G" -s -n "${snap_name}" "${lv_path}"
    snapshots+=( "${snap_name}" )
done

# Use dd to copy snapshot to target filesystem.
for snap in "${snapshots[@]}"; do
    logger -p user.notice "${script_name}: Copying /dev/${vg_name}/${snap} to ${backup_target}/${snap}.$(date +%Y-%m-%d-%H%M).img"

    if dd if="/dev/${vg_name}/${snap}" of="${backup_target}/${snap}.$(date +%Y-%m-%d-%H%M).img"; then
        logger -p user.info "${script_name}: Copy succeeded."
    else
        logger -p user.err "${script_name}: Copy failed."
    fi
done

# Delete snapshots.
for snap in "${snapshots[@]}"; do
    logger -p user.notice "${script_name}: Removing snapshot ${snap}."

    if lvremove -f "/dev/${vg_name}/${snap}"; then
        logger -p user.notice "${script_name}: /dev/${vg_name}/${snap} removed."
    else
        logger -p user.warn "${script_name}: Removal of /dev/${vg_name}/${snap} failed."
    fi
done
