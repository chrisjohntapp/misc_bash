#!/bin/bash

#
# Re-IP.
#
# Detects when the VM it is run on has been restarted in the DR site and
# updates network configurations appropriately.
#
# Should be run from cron, every 5 minutes or so.
#
# Has two modes, failover and failback. In production, both should be enabled.
#
# Failover will test connectivity to the primary_gateway and if it succeeds,
# will exit, doing nothing. If connectivity fails however, it will change
# network prefixes in various places, depending on OS/version, to the dr_prefix
# and will restart networking.
#
# Failback will test connectivity to the dr_gateway and if it succeeds, will
# exit, doing nothing. If connectivity fails however, it will change these same
# prefixes to the primary_prefix and restart networking.
#
# Enabling both failover and failback will ensure that in the event of a false
# positive failover, the script will effect automatic recovery.
#
# The script currently changes IP addresses in /etc/hosts and wherever the
# network interface configuration file(s) is/are located. Other file locations
# can easily be added should they be required (/etc/fstab for example) by
# another call to the update_file function.
#
# This script does not and should not be configured to update resolv.conf, as
# resolvers in both sites should be configured on all hosts at all times.
#
# Tested on:
#   Ubuntu 12.04, 14.04, 16.04, 18.04.
#   CentOS 6, 7.
#
# TODO:
#   Split old_prefix_files test out into a function.
#   Add --journald support to logger, for such systems (autodetect).
#   Use descriptive names for return codes (eg 10. = "NOOP").


# ==============================================================================
# Settings.
# ==============================================================================

# Should script fail over to DR site, fail back to primary site, or both?
# 1: true, 0: false.
failover=1
failback=1

primary_prefix='10.16.11'
primary_gateway='10.16.11.1'

dr_prefix='10.12.11'
dr_gateway='10.12.11.1'


# ==============================================================================
# Functions.
# ==============================================================================

function ping_gateway() { # 1:gateway_ip
    #
    # Ping 10 times and return result.
    #
    logger -p user.info "${script_name}: Pinging gateway $1."
    ping -c10 "$1" > /dev/null
}

function flush_interfaces() { # None
    #
    # Remove all IP addresses from all network interfaces, except loopback.
    #
    interfaces="$(basename -a /sys/class/net/*)"
    for i in ${interfaces}; do
        if [[ $i != 'lo' ]]; then
            logger -p user.notice "${script_name}: Flushing config on $i."
            ip addr flush "$i"
        fi
    done
}

function restart_networking_centos() { # 1:os_version
    #
    # Run scripts to restart networking, applying a new configuration.
    #
    logger -p user.notice "${script_name}: Restarting networking."
    case "$1" in
        6)
            service network restart
            ;;
        7)
            systemctl restart network.service
            ;;
        *) 
            logger -p user.crit "${script_name}: CentOS version not supported."
            exit 1
            ;;
    esac
}

function restart_networking_ubuntu() { # 1:os_version
    #
    # Run scripts to restart networking, applying a new configuration.
    # Also functions as a list of reasons why not to use Ubuntu at work.
    #
    logger -p user.notice "${script_name}: Restarting networking."
    case "$1" in
        12.04)
            # Redirect is to silence misleading suggestions from Ubuntu.
            /etc/init.d/networking stop >/dev/null
            /etc/init.d/networking start >/dev/null
            ;;
        14.04)
            # See Ubuntu bug #1301015 for reasoning behind this.
            ifdown -a --exclude=lo
            ifup -a --exclude=lo
            ;;
        16.04)
            # Previous IPs are not removed by systemctl in 16.04.
            flush_interfaces
            systemctl restart networking.service
            ;;
        18.04)
            # Flush is required again.
            flush_interfaces
            netplan apply
            systemctl restart systemd-networkd.service
            ;;
        *    )
            logger -p user.crit "${script_name}: Ubuntu version not \
recognised."
            exit 1
            ;;
    esac
}

function update_file() { # 1:file, 2:old_prefix, 3:new_prefix
    #
    # Check for old_prefix in file, and if found change all examples for
    # new_prefix.
    #
    if ! [[ $(cat "$1") =~ $2 ]]; then
        logger -p user.info "${script_name}: No IP address updates required to \
$1."
        return
    else
        logger -p user.notice "${script_name}: Changing network prefix from $2 \
to $3 on all IP addresses in $1."
        sed -i "s/$2/$3/g" "$1"
    fi
}

function update_ubuntu_12_14_16_interfaces() { # 1:old_prefix, 2:new_prefix
    #
    # Check for old_prefix in network interface config files and if found
    # replace all examples with new_prefix.
    #
    old_prefix_files=$(find /etc/network/interfaces \
    /etc/network/interfaces.d -type f -exec grep -l "$1" {} \;)

    if [[ -z ${old_prefix_files} ]]; then
        logger -p user.info "${script_name}: No IP address updates required to \
interface config files."
        return 10
    else
        logger -p user.notice "${script_name}: Changing network prefixes from \
$1 to $2 in ${old_prefix_files}."
        sed -i "s/$1/$2/g" /etc/network/interfaces

        mapfile -t ifcfg_files < <(ls /etc/network/interfaces.d/*.cfg)
        for ((i=0; i<${#ifcfg_files[@]}; i++)); do
            sed -i "s/$1/$2/g" "${ifcfg_files[i]}"
        done
    fi

}

function update_ubuntu_18_interfaces() { # 1:old_prefix, 2:new_prefix
    #
    # Check for old_prefix in network interface config files and if found
    # replace all examples with new_prefix.
    #
    old_prefix_files=$(find /etc/netplan -type f -name '*.yaml' \
    -exec grep -l "$1" {} \;)

    if [[ -z ${old_prefix_files} ]]; then
        logger -p user.info "${script_name}: No IP address updates required to \
interface config files."
        return 10
    else
        logger -p user.notice "${script_name}: Changing network prefixes from \
$1 to $2 in ${old_prefix_files}."

        mapfile -t ifcfg_files < <(ls /etc/netplan/*.yaml)
        for ((i=0; i<${#ifcfg_files[@]}; i++)); do
            sed -i "s/$1/$2/g" "${ifcfg_files[i]}"
        done
    fi
}

function update_centos_6_7_interfaces() { # 1:old_prefix, 2:new_prefix
    #
    # Check for old_prefix in network interface config files and if found
    # replace all examples with new_prefix.
    #
    old_prefix_files=$(find /etc/sysconfig/network-scripts -type f \
    -name 'ifcfg-*' -exec grep -l "$1" {} \;)

    if [[ -z ${old_prefix_files} ]]; then
        logger -p user.info "${script_name}: No IP address updates required to \
interface config files."
        return 10
    else
        logger -p user.notice "${script_name}: Changing network prefixes from \
$1 to $2 in ${old_prefix_files}."

        mapfile -t ifcfg_files < <(ls /etc/sysconfig/network-scripts/ifcfg-*)
        for ((i=0; i<${#ifcfg_files[@]}; i++)); do
            sed -i "s/$1/$2/g" "${ifcfg_files[i]}"
        done
    fi
}

function update_config() { # 1:os_vendor, 2:os_version, 3:old_prefix,
                           # 4:new_prefix}
    #
    # Checks OS vendor and version and calls appropriate function to update
    # network config file(s). If changes are made by that function it then
    # calls a function to restart the host networking.
    # Then it calls functions to update any additional files which may contain
    # IP addresses (/etc/hosts for example).
    #
    if [[ "$1" == "ubuntu" ]]; then
        case "$2" in
            1[246].04)
                update_ubuntu_12_14_16_interfaces "$3" "$4"
                [[ $? -ne 10 ]] && restart_networking_"$1" "$2"

                update_file /etc/hosts "$3" "$4"
                # Any additional files to be updated (such as /etc/fstab)
                # should be added here. eg:
                # update_file /etc/fstab "$3" "$4"

                ;;
            18.04    )
                update_ubuntu_18_interfaces "$3" "$4"
                [[ $? -ne 10 ]] && restart_networking_"$1" "$2"

                update_file /etc/hosts "$3" "$4"

                ;;
            *        )
                logger -p user.crit "${script_name}: Ubuntu version not supported."
                exit 1
                ;;
        esac

    elif [[ "$1" == "centos" ]]; then
        case "$2" in
            [67])
                update_centos_6_7_interfaces "$3" "$4"
                [[ $? -ne 10 ]] && restart_networking_"$1" "$2"

                update_file /etc/hosts "$3" "$4"

                ;;
            *   )
                logger -p user.crit "${script_name}: CentOS version not supported."
                exit 1
                ;;
        esac
    fi
}    


#===============================================================================
# Main.
#===============================================================================

#
# Gather info & validate.
#
if [[ -r /etc/os-release ]]; then
    os_vendor=$(grep -E "^ID=" /etc/os-release | cut -d"=" -f2 | sed 's/"//g')
    os_version=$(grep -E "^VERSION_ID=" /etc/os-release | cut -d"=" -f2 | \
        sed 's/"//g')
elif [[ $(cat /etc/centos-release) =~ 'CentOS release 6' ]]; then
    os_vendor='centos'
    os_version=6
fi

case "${os_vendor}" in
    ubuntu)
        if ! [[ "${os_version}" =~ 1[2468].04 ]]; then
            logger -p user.crit "${script_name}: Ubuntu OS version not \
supported."
            exit 1
        fi
        ;;
    centos)
        if ! [[ "${os_version}" =~ [67] ]]; then
            logger -p user.crit "${script_name}: CentOS version not \
supported."
            exit 1
        fi
        ;;
    *     )
        logger -p user.crit "${script_name}: OS not supported."
        exit 1
        ;;
esac


# =====================================
# Setup global vars.
# =====================================
script_name=$(basename "$0")


# =====================================
# Try the primary gateway.
# =====================================
if [[ ${failover} == 1 ]]; then
    if ping_gateway "${primary_gateway}"; then
        logger -p user.info "${script_name}: ${primary_gateway} is reachable. \
This VM appears to be on primary network."
        exit 0
    else
        logger -p user.notice "${script_name}: ${primary_gateway} is not \
reachable. Assuming we're on the DR site. Updating IP address(es) to DR site \
prefix, if required."
        update_config "${os_vendor}" "${os_version}" "${primary_prefix}" \
        "${dr_prefix}"
    fi
fi

# =====================================
# Try the DR gateway.
# =====================================
if [[ ${failback} == 1 ]]; then
    if ping_gateway "${dr_gateway}"; then
        logger -p user.info "${script_name}: ${dr_gateway} is reachable. This \
VM appears to be on the DR network."
        exit 0
    else
        logger -p user.notice "${script_name}: ${dr_gateway} is not \
reachable. Assuming we are on the primary site. Updating IP address(es) to \
primary site prefix, if required."
        update_config "${os_vendor}" "${os_version}" "${dr_prefix}" \
        "${primary_prefix}"
    fi
fi
